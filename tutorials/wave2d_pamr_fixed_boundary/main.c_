
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <bbhutil.h>
#include <sdf_read.h>
#include <u_f.h>
#include <init_f.h>
#include <ire_f.h>
#include <res_f.h>
#include <res_f_t.h>
#include <u_f_t.h>
#include <init_f_t.h>
/* Shapes: */
int Nx;
int Ny;
int shape[2];
int dim;
int level;
/* Coordinates: */
double *x;
double *y;
/* Grid Functions: */
double *n_f;
double *n_f_t;
double *nm1_f;
double *nm1_f_t;
double *np1_f;
double *np1_f_t;
/* Parameters: */
double A;
double ht;
double xc;
double yc;
double delx;
double dely;
double idsigx;
double idsigy;
double myzero;
/* Coordinate Parameters: */
double x_max;
double x_min;
double hx;
double y_max;
double y_min;
double hy;
double bbox[4];
int phys_bdy[4];
/* Time Evolution Parameters: */
int steps;
int output_freq;
double lambda;
double time;
void read_params(char *p_file,double *idsigy,int *Nx,double *x_max,double *idsigx,double *delx,int *level,double *x_min,int *Ny,double *A,double *y_max,double *y_min,double *myzero,double *yc,double *dely,double *xc,int *steps,double *lambda,int *output_freq)
{
get_param(p_file,"idsigy","double",1,idsigy);
get_param(p_file,"Nx","long",1,Nx);
get_param(p_file,"x_max","double",1,x_max);
get_param(p_file,"idsigx","double",1,idsigx);
get_param(p_file,"delx","double",1,delx);
get_param(p_file,"level","long",1,level);
get_param(p_file,"x_min","double",1,x_min);
get_param(p_file,"Ny","long",1,Ny);
get_param(p_file,"A","double",1,A);
get_param(p_file,"y_max","double",1,y_max);
get_param(p_file,"y_min","double",1,y_min);
get_param(p_file,"myzero","double",1,myzero);
get_param(p_file,"yc","double",1,yc);
get_param(p_file,"dely","double",1,dely);
get_param(p_file,"xc","double",1,xc);
get_param(p_file,"steps","long",1,steps);
get_param(p_file,"lambda","double",1,lambda);
get_param(p_file,"output_freq","long",1,output_freq);
}

int main(int argc, char **argv) {
char pfile[64];
strcpy(pfile,argv[1]);
/* Initialization of Coordinate: */
dim =2;
read_params(pfile,&idsigy,&Nx,&x_max,&idsigx,&delx,&level,&x_min,&Ny,&A,&y_max,&y_min,&myzero,&yc,&dely,&xc,&steps,&lambda,&output_freq);

Nx = Nx*(int)pow(2.0,(double)level)+1;
steps = steps*(int)pow(2.0,(double)level);
Ny = Ny*(int)pow(2.0,(double)level)+1;
steps = steps*(int)pow(2.0,(double)level);
/* Allocating Memory to Grid Functions: */
x = vec_alloc(Nx);
y = vec_alloc(Ny);
n_f = vec_alloc(1*Nx*Ny);
n_f_t = vec_alloc(1*Nx*Ny);
nm1_f = vec_alloc(1*Nx*Ny);
nm1_f_t = vec_alloc(1*Nx*Ny);
np1_f = vec_alloc(1*Nx*Ny);
np1_f_t = vec_alloc(1*Nx*Ny);
hx = (x_max-x_min)/(Nx-1);
dvumsh(x,Nx,x_min,x_max);
hy = (y_max-y_min)/(Ny-1);
dvumsh(y,Ny,y_min,y_max);
ht = lambda*sqrt( 0.0+ hx*hx+ hy*hy);
shape[0]=Nx;
shape[1]=Ny;
bbox[0]=x_min;
bbox[1]=x_max;
bbox[2]=y_min;
bbox[3]=y_max;
time=0.0;
for (int i=0; i<steps; i++) {
}
}
